const StyleDictionary = require('style-dictionary');

// Custom name transform for consistent kebab case and handling decimals
StyleDictionary.registerTransform({
  name: 'name/kebab',
  type: 'name',
  transformer: (token, options) => {
    // Replace dots with hyphens in the path parts
    const sanitizedPath = token.path.map(part => 
      String(part).replace('.', '-')
    );
    // Join all path parts with hyphens and convert to lowercase
    return sanitizedPath.join('-').toLowerCase();
  }
});

// Register custom transform for CSS variables
StyleDictionary.registerTransform({
  name: 'css/vars',
  type: 'value',
  transformer: (token) => token.value
});

// Add reference transform to handle token references like {color.primary.500}
StyleDictionary.registerTransform({
  name: 'value/reference',
  type: 'value',
  matcher: (token) => typeof token.value === 'string' && token.value.includes('{'),
  transformer: (token, dictionary) => {
    const references = token.value.match(/\{([^}]+)\}/g) || [];
    let value = token.value;
    
    references.forEach((ref) => {
      const path = ref.replace(/[{}]/g, '').split('.');
      const refToken = dictionary.tokens[path[0]][path[1]][path[2]];
      value = value.replace(ref, refToken.value);
    });
    
    return value;
  }
});

// Register custom format for CSS variables
StyleDictionary.registerFormat({
  name: 'css/variables',
  formatter: ({ dictionary }) => {
    return `:root {\n${dictionary.allTokens
      .map(token => `  --${token.name}: ${token.value};`)
      .join('\n')}\n}`;
  }
});

// Register custom format for TypeScript
StyleDictionary.registerFormat({
  name: 'typescript/module',
  formatter: ({ dictionary }) => {
    return `// Generated by Style Dictionary
export const tokens = {
${dictionary.allTokens
  .map(token => `  '${token.name}': '${token.value}'`)
  .join(',\n')}
} as const;

export type TokenName = keyof typeof tokens;
`;
  }
});

module.exports = {
  source: [
    // Load in this order to resolve references correctly
    'tokens/src/global/**/*.json',    // Global tokens first
    'tokens/src/components/**/*.json'  // Component tokens that reference globals
  ],
  platforms: {
    css: {
      transforms: [
        'name/kebab',           // Use our custom kebab transform instead of name/cti/kebab
        'value/reference',
        'css/vars'
      ],
      buildPath: 'src/styles/',
      files: [{
        destination: 'tokens.css',
        format: 'css/variables'
      }]
    },
    typescript: {
      transforms: [
        'name/kebab',           // Use our custom kebab transform here too
        'value/reference'
      ],
      buildPath: 'src/generated/',
      files: [{
        destination: 'tokens.ts',
        format: 'typescript/module'
      }]
    }
  }
}; 